import numpy as np
import mysql.connector
from sklearn.svm import SVC


Connection_Key = mysql.connector.connect(host="localhost",user="root",password="",database="PROJECTAIdatabase")
SQL = Connection_Key.cursor()

#good tune parameters make model pass the overfiting

FEATURS_EXTRUCTION_METHOD = 'MANUALEXTRUCTION'  # MANUAL OR TF-IDF
MARGINSSSSS = 'SOFT'  # DEFULTS , HARD inf   OR SOFT 1
KERNALLLLLL = 'RBF'   #LINEAR POLYNOMINALE(degree,coffes) RBF(gamma=defults,auto)
TRAININGDATASIZE = 2500  # for each label



TRAINING_LABELS = []
SQL.execute(f" SELECT LABEL From PROJRCTAI_TRAININGDATATABLE where LABEL = 0")
SQL_TRAININGDATA = SQL.fetchall()
i = 0
for trainingsample in SQL_TRAININGDATA:
    TRAINING_LABELS.append(trainingsample[0])
    i += 1
    if i > TRAININGDATASIZE: break


SQL.execute(f" SELECT LABEL From PROJRCTAI_TRAININGDATATABLE where LABEL = 1")
SQL_TRAININGDATA = SQL.fetchall()
i = 0
for trainingsample in SQL_TRAININGDATA:
    TRAINING_LABELS.append(trainingsample[0])
    i += 1
    if i > TRAININGDATASIZE: break




TRAINING_FEATURES = []
SQL.execute(f" SELECT PHONE_NUMBERS_COUNT, LINKS_COUNT, CURRANCY_SYMBOLS_COUNT, SPECIAL_SYMBOLS_COUNT, SPECIAL_WORDS_COUNT, UPPERCASE_LETTERS_PERCENTAGE, BIG_WORDS_PERCENTAGE From PROJRCTAI_TRAININGDATATABLE where LABEL = 0 ")
SQL_TRAININGDATA = SQL.fetchall()
i = 0
for trainingsample in SQL_TRAININGDATA:
    TRAINING_FEATURES.append(trainingsample)
    i += 1
    if i > TRAININGDATASIZE: break

SQL.execute(f" SELECT PHONE_NUMBERS_COUNT, LINKS_COUNT, CURRANCY_SYMBOLS_COUNT, SPECIAL_SYMBOLS_COUNT, SPECIAL_WORDS_COUNT, UPPERCASE_LETTERS_PERCENTAGE, BIG_WORDS_PERCENTAGE From PROJRCTAI_TRAININGDATATABLE where LABEL = 1 ")
SQL_TRAININGDATA = SQL.fetchall()
i = 0
for trainingsample in SQL_TRAININGDATA:
    TRAINING_FEATURES.append(trainingsample)
    i += 1
    if i > TRAININGDATASIZE: break


TRAININGLABELESARRAY = np.array(TRAINING_LABELS).reshape(-1)
TRAININGFEATURSARRAY = np.array(TRAINING_FEATURES)



def ACCURCY_TEST( MODEL_CLASSIFIVATION_LIST ):

    SQL.execute(" SELECT LABEL From PROJRCTAI_VALIDATIONDATATABLE ")
    SQL_VALIDATIONDATA = SQL.fetchall()
    CORRECTCLASSIFICATIONCOUNTER = 0
    i = -1
    for Validationsample in SQL_VALIDATIONDATA:
        i = i + 1
        if( Validationsample[0] == MODEL_CLASSIFIVATION_LIST[i]):
            CORRECTCLASSIFICATIONCOUNTER += 1

    return (CORRECTCLASSIFICATIONCOUNTER / 20000) * 100




# test the classifier!!!!!!!!!!!!
'''
EMAIL_MESSAGE_FEATURES = np.array([(0,0 , 0,0 , 0, 2.94, 0.0)]).reshape(1, -1)
#MODEL = SVC(kernel=[linear-polynominal-rbf-], C=[inf:forhard other forsoft])
MODEL01 = SVC(kernel='linear')
MODEL01.fit(TRAININGFEATURSARRAY, TRAININGLABELESARRAY)
EMAILCLASS = MODEL01.predict(EMAIL_MESSAGE_FEATURES)
print(f"THIS EMAIL IS A {EMAILCLASS}")
'''


SQL.execute(" SELECT PHONE_NUMBERS_COUNT, LINKS_COUNT, CURRANCY_SYMBOLS_COUNT, SPECIAL_SYMBOLS_COUNT, SPECIAL_WORDS_COUNT, UPPERCASE_LETTERS_PERCENTAGE, BIG_WORDS_PERCENTAGE From PROJRCTAI_VALIDATIONDATATABLE ")
SQL_VALIDATIONDATA = SQL.fetchall()
MODEL_CLASSIFIVATION_LIST = []

MODEL02 = SVC(kernel='rbf',gamma=0.1, C=0.1 )
MODEL02.fit(TRAININGFEATURSARRAY, TRAININGLABELESARRAY)

for validationsample in SQL_VALIDATIONDATA:
    EMAIL_MESSAGE_FEATURES = np.array(validationsample).reshape(1, -1)
    EMAILCLASS = MODEL02.predict(EMAIL_MESSAGE_FEATURES)
    MODEL_CLASSIFIVATION_LIST.append(EMAILCLASS)


MODEL_RATE = ACCURCY_TEST(MODEL_CLASSIFIVATION_LIST)
print(round(MODEL_RATE,2))


print(f"FEATURS_EXTRUCTION_METHOD = {FEATURS_EXTRUCTION_METHOD}   MARGINSSSSS = {MARGINSSSSS}  KERNALLLLLL = {KERNALLLLLL}   TRAININGDATASIZE = {TRAININGDATASIZE*2}  ACCURACY = {MODEL_RATE}" )
#AFTER EACH TEST I ADD THE PARAMETERS TO AN SQL TABLE
#SQL.execute(f"INSERT INTO PROJRCTAI_MODELSSPECIFICATION (FEARTURES, MARGINS, THEKARNEL, TRAININGDATA, ACCURACY) VALUES ( '{FEATURS_EXTRUCTION_METHOD}','{MARGINSSSSS}', '{KERNALLLLLL}', '{TRAININGDATASIZE * 2}', '{MODEL_RATE}' )")
#Connection_Key.commit()